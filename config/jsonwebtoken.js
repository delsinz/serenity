/**
 * @module jsonwebtoken
 * @file Provides an interface for authentication
 * @requires config
 * @requires jwt-simple
 */

var User = require ('../model/user_model');
var config = require("../config.json")
var jwt = require("jwt-simple")

/**
 * constructor for the jsonToken
 * @class
 */
var jsonToken = function(){};

/**
 * Creates a User with an encrypted password
 * @param {Object} db - database Object to be queried
 * @param {string} username - the username to be created
 * @param {string} password - the valid password of the user to be created
 * @param {Object} req - the reqeust sent to the server
 * @param {jsonToken~createuserCallback} callback - callback to the function
 */
jsonToken.prototype.createUser = function(db, username, password, req, callback){
    process.nextTick(function(){
        //find the user in database
        User.findUser(db, username, function(temp) {
            //if user doesnt exist make it
            if (temp===null) {
                //create a secure password
                var securePassword = User.generateHash(password);
                //create the User in the database
                User.createUser(db, username, securePassword, req.body.email, req.body.phoneNumber, req.body.gender, function(newUser){
                    callback({success:true, message: 'User Successfully Created'});
                });
            } else {
                callback({success:false, message: 'Username Already in Use'});
            }
        });
    })
}
/**
 * callback to the creation of the user
 * @callback jsonToken~createuserCallback 
 * @param {Object} JSONresponse - javascript Object literal with obj.success boolean showing success and a obj.message showing message
 */
 
/**
 * Updates user with encrypted password
 * @param {Object} db - database Object to be queried
 * @param {string} username - the username to be updated
 * @param {string} password - the valid password of the user
 * @param {Object} req - the reqeust sent to the server
 * @param {jsonToken~createuserCallback} callback - callback to the function
 */
 jsonToken.prototype.editProfile = function(db, username, password, req, callback){
	 //create a secure password
	 var securePassword = User.generateHash(password);
	 // Update user in database
	 User.updateUser(db, username, securePassword, req.body.email, req.body.phoneNumber, req.body.gender, 
					 req.body.aboutMe, req.body.userType, req.body.connPrivacy, req.body.msgPrivacy,
					 req.body.profPrivacy, req.body.profilePic, function(){
						 callback({success: true, message: 'User profile updated succesfully'});
					 });
 }


/**
 * Authenticates a user given a username and password returning back a valid token for the user
 * @param {Object} db - database Object to be queried
 * @param {string} username - the username to be used for authentication
 * @param {string} password - the password of the user to be used for authentication
 * @param {jsonToken~authenticateCallback} callback - callback to the function
 */
jsonToken.prototype.authenticate = function(db, username, password, callback) {
    if(!username || !password) {
        callback({success: false, messeage: 'username or password not provided'})
    }
    User.findUser(db, username, function(temp) {
        //if doesnt exist dont let the user in
        if (temp===null) {
            callback({success: false, message: 'Username does not exist'})
            return;
        }

        if (!User.validPassword(temp.Password, password)) {
            //if invalid password don't let user in
            callback({success: false, message: 'Incorrect Password'});
            return;
        }
        var token = jwt.encode({iss: temp}, config.TOKEN_SECRET);
        callback({success: true, message: 'Successfully Logged in', user:temp, token});
    })
};
/**
 * callback to the authenicate method of jsonToken
 * @callback jsonToken~authenticateCallback
 * @param {Object} JSONresponse - javascript Object literal with obj.success boolean showing success and a obj.message showing message
 */

/**
 * Checks if the request has come with a valid token and attaches the owner of token to the response
 * @param {Object} req - reqeust object generated by express and node
 * @param {Object} res - response object generated by express and node
 * @param {function} next - function to be performed after authentication
 */
jsonToken.prototype.isLoggedIn = function(req,res, next) {
    var token = (req.body && req.body.access_token) || (req.query && req.query.access_token) || req.headers['x-access-token'] || req.cookies.token;
	if (token) {
        try {
            var decoded = jwt.decode(token, config.TOKEN_SECRET);
            req.user = decoded.iss
            if(!req.user.isVerifiedEmail){return res.redirect('/verify?username='+req.user.UserName)}
            next();
            return;
        }
        catch (err) {
            res.redirect('/login')
            return;
        }
    }
    res.redirect('/login')
}

module.exports = new jsonToken();